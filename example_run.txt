age@home:~/workspace/RegexpTest$ ocaml
        OCaml version 4.01.0

# #load "str.cma";;
# (* Actually no idea how to include files, so sorry for pasting. *)
  (* Note that I had to extract the prefixes from the emotify function.
 * The postfix technicallyy could be stuffed back again,
 * but that would be kinda ugly. *)
let rec emotify str = function
| (reg, img) :: tail ->
emotify (Str.global_replace reg img str) tail
| _ -> str

let emotePrefix = "<img src='images/emotes/"
let emotePostfix = "'>"

let emotes = [
(Str.regexp "8-)", emotePrefix ^ "glass.gif" ^ emotePostfix);
(Str.regexp ":-\\?", emotePrefix ^ "cnf.gif" ^ emotePostfix);
(* -- BEGIN -- *)
(* Note that these three regexes are semantically the same as tested by the
 * Java JUnit tests. First rule: If there's no ampersand since the previous
 * semicolon, this semicolon can't belong to an entity. Replace! *)
(Str.regexp ";\\([^&]*\\);)", ";\\1" ^ emotePrefix ^ "wink.gif" ^ emotePostfix);
(* If there's no ampersand at all, this semicolon can't belong to an entity. Replace! *)
(Str.regexp "^\\([^&]*\\);)", "\\1" ^ emotePrefix ^ "wink.gif" ^ emotePostfix);
(* This is actually the only non-waterproof rule:
 * If there's no ampersand in the previous 8 characters (allow more),
 * this semicolon hopefully doesn't belong to an entity. Replace! *)
(Str.regexp "\\([^&][^&][^&][^&][^&][^&][^&][^&]\\);)",
   "\\1" ^ emotePrefix ^ "wink.gif" ^ emotePostfix);
(* -- END -- *)
(Str.regexp "::)", emotePrefix ^ "roll.gif" ^ emotePostfix);
(Str.regexp ":@", emotePrefix ^ "angry.gif" ^ emotePostfix);
(* ...  *)
]
* *                           * *         * *                 ;;
val emotify : string -> (Str.regexp * string) list -> string = <fun>
val emotePrefix : string = "<img src='images/emotes/"
val emotePostfix : string = "'>"
val emotes : (Str.regexp * string) list =
  [(<abstr>, "<img src='images/emotes/glass.gif'>");
   (<abstr>, "<img src='images/emotes/cnf.gif'>");
   (<abstr>, ";\\1<img src='images/emotes/wink.gif'>");
   (<abstr>, "\\1<img src='images/emotes/wink.gif'>");
   (<abstr>, "\\1<img src='images/emotes/wink.gif'>");
   (<abstr>, "<img src='images/emotes/roll.gif'>");
   (<abstr>, "<img src='images/emotes/angry.gif'>")]
# emotify "Hello there ;) This is a &quot;test&quot;;) (this &quot;not&quot;)" emotes;;
- : string =
"Hello there <img src='images/emotes/wink.gif'> This is a &quot;test&quot;<img src='images/emotes/wink.gif'> (this &quot;not&quot;)"
# exit 0;;
age@home:~/workspace/RegexpTest$